<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is re-generated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace <#= Regex.Replace(Path.GetFileNameWithoutExtension(Host.TemplateFile), @"\.g(enerated)?$", string.Empty) #>;

using System;
<#
    var thisDir = new DirectoryInfo(Host.ResolvePath("."));
    foreach (var file in thisDir.EnumerateFiles("*.txt"))
    {
        var className = Path.GetFileNameWithoutExtension(file.Name);
        using var reader = file.OpenText();
#>

partial class <#= className #> // <#= file.Name #>
{
    public static Utf8Strings Strings => new(Count, Data, Offsets, CharCounts);

    static ReadOnlySpan<byte> Data =>
<#
        var offset = 0;
        var offsets = new List<int>();
        var charCounts = new List<int>();

        while (reader.ReadLine() is { } line)
        {
            line = line.Trim();
            if (line.Length == 0 || line[0] == '#')
                continue;

            var byteLength = Encoding.UTF8.GetByteCount(line);

            if (line.Length > 0)
            {
#>
        """<#= line #>"""u8 + // [<#= offset #>..<#= offset + byteLength #>]
<#
            }

            offsets.Add(offset);
            charCounts.Add(line.Length);
            offset += byteLength;
        }

        offsets.Add(offset);
#>
        ""u8;

    const int size = <#= offsets[offsets.Count - 1] #>;

    public const int Count = <#= offsets.Count - 1 #>;

    static ReadOnlySpan<int> Offsets =>
    [
<#
    foreach (var group in from e in offsets.Select((v, i) => (Index: i, Value: v))
                          group e.Value.ToString(CultureInfo.InvariantCulture) by e.Index / 15)
    {
#>
        <#= string.Join(", ", group) #>,
<#
    }
#>
    ];

    static ReadOnlySpan<byte> CharCounts =>
    [
<#
    foreach (var group in from e in charCounts.Select((v, i) => (Index: i, Value: v))
                          group e.Value.ToString(CultureInfo.InvariantCulture) by e.Index / 20)
    {
#>
        <#= string.Join(", ", group) #>,
<#
    }
#>
    ];
}
<#
    }
#>
